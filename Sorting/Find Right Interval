import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int[] findRightInterval(int[][] intervals) {
        int n = intervals.length;
        int[] result = new int[n];
        int[][] starts = new int[n][2]; // {start, original_index}

        // Store the start values and their original indices
        for (int i = 0; i < n; i++) {
            starts[i][0] = intervals[i][0];
            starts[i][1] = i;
        }

        // Sort the array by start values
        Arrays.sort(starts, (a, b) -> a[0] - b[0]);

        // For each interval, find the right interval using binary search
        for (int i = 0; i < n; i++) {
            int end = intervals[i][1];
            int idx = binarySearch(starts, end);
            result[i] = idx;
        }

        return result;
    }

    private int binarySearch(int[][] starts, int target) {
        int low = 0, high = starts.length - 1;

        if (starts[high][0] < target) {
            return -1;
        }

        while (low < high) {
            int mid = (low + high) / 2;
            if (starts[mid][0] >= target) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        return starts[low][1];
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] intervals = {{1, 2}, {2, 3}, {3, 4}};
        int[] result = sol.findRightInterval(intervals);

        // Output the result
        for (int i : result) {
            System.out.print(i + " ");
        }
    }
}
