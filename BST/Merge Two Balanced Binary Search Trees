// Java program to Merge Two Balanced Binary Search Trees
import java.io.*;
import java.util.ArrayList;

// A binary tree node
class Node {
	
	int data;
	Node left, right;
	
	Node(int d) {
		data = d;
		left = right = null;
	}
}

class BinarySearchTree
{
	
	// Root of BST
	Node root;

	// Constructor
	BinarySearchTree() { 
		root = null; 
	}
	
	// Inorder traversal of the tree
	void inorder()
	{
		inorderUtil(this.root);
	}
	
// Utility function for inorder traversal of the tree
void inorderUtil(Node node)
{
	if(node==null)
		return;
		
	inorderUtil(node.left);
	System.out.print(node.data + " ");
	inorderUtil(node.right);
}
	

	// A Utility Method that stores inorder traversal of a tree
	public ArrayList<Integer> storeInorderUtil(Node node, ArrayList<Integer> list)
	{
		if(node == null)
			return list;
		
		//recur on the left child
		storeInorderUtil(node.left, list);
		
		// Adds data to the list
		list.add(node.data);
		
		//recur on the right child
		storeInorderUtil(node.right, list);
		
		return list;
	}
	
	// Method that stores inorder traversal of a tree
	ArrayList<Integer> storeInorder(Node node)
	{
		ArrayList<Integer> list1 = new ArrayList<>(); 
		ArrayList<Integer> list2 = storeInorderUtil(node,list1); 
		return list2;
	}

	// Method that merges two ArrayLists into one. 
	ArrayList<Integer> merge(ArrayList<Integer>list1, ArrayList<Integer>list2, int m, int n)
	{
		// list3 will contain the merge of list1 and list2
		ArrayList<Integer> list3 = new ArrayList<>();
		int i=0;
		int j=0;
		
		//Traversing through both ArrayLists
		while( i<m && j<n)
		{
			// Smaller one goes into list3
			if(list1.get(i)<list2.get(j))
			{
				list3.add(list1.get(i));
				i++;
			}
			else
			{
				list3.add(list2.get(j));
				j++;
			}
		}
		
		// Adds the remaining elements of list1 into list3
		while(i<m)
		{
			list3.add(list1.get(i));
			i++;
		}
	
		// Adds the remaining elements of list2 into list3
		while(j<n)
		{
			list3.add(list2.get(j));
			j++;
		}
		return list3;
	}
	
	// Method that converts an ArrayList to a BST
	Node ALtoBST(ArrayList<Integer>list, int start, int end)
	{
		// Base case
		if(start > end)
			return null;
	
		// Get the middle element and make it root	 
		int mid = (start+end)/2;
		Node node = new Node(list.get(mid));

		/* Recursively construct the left subtree and make it
		left child of root */
		node.left = ALtoBST(list, start, mid-1);
		
		/* Recursively construct the right subtree and make it
		right child of root */
		node.right = ALtoBST(list, mid+1, end);
	
	return node;
	}
	
	// Method that merges two trees into a single one. 
	Node mergeTrees(Node node1, Node node2)
	{
		//Stores Inorder of tree1 to list1
		ArrayList<Integer>list1 = storeInorder(node1);
		
		//Stores Inorder of tree2 to list2
		ArrayList<Integer>list2 = storeInorder(node2);
		
		// Merges both list1 and list2 into list3
		ArrayList<Integer>list3 = merge(list1, list2, list1.size(), list2.size());
		
		//Eventually converts the merged list into resultant BST
		Node node = ALtoBST(list3, 0, list3.size()-1);
		return node;
	}

	// Driver function
	public static void main (String[] args)
	{
		
		/* Creating following tree as First balanced BST
				100
				/ \
				50 300
				/ \
			20 70
		*/
		
		BinarySearchTree tree1 = new BinarySearchTree();
		tree1.root = new Node(100);
		tree1.root.left = new Node(50);
		tree1.root.right = new Node(300);
		tree1.root.left.left = new Node(20);
		tree1.root.left.right = new Node(70);
		
		/* Creating following tree as second balanced BST
				80
				/ \
			40 120
		*/
			
		BinarySearchTree tree2 = new BinarySearchTree();
		tree2.root = new Node(80); 
		tree2.root.left = new Node(40);
		tree2.root.right = new Node(120);
			
			
		BinarySearchTree tree = new BinarySearchTree(); 
		tree.root = tree.mergeTrees(tree1.root, tree2.root);
		System.out.println("The Inorder traversal of the merged BST is: ");
		tree.inorder();
	}
}
// This code has been contributed by Kamal Rawal










///////////////////////////////////////////////////////////////////////////


import java.util.ArrayList;
import java.util.List;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int x) {
        val = x;
        left = right = null;
    }
}

public class BSTMerger {

    // Method to perform inorder traversal and store nodes in a list
    private void inorderTraversal(TreeNode root, List<Integer> nodes) {
        if (root == null) {
            return;
        }
        inorderTraversal(root.left, nodes);
        nodes.add(root.val);
        inorderTraversal(root.right, nodes);
    }

    // Method to merge two sorted lists
    private List<Integer> mergeSortedLists(List<Integer> list1, List<Integer> list2) {
        List<Integer> mergedList = new ArrayList<>();
        int i = 0, j = 0;
        while (i < list1.size() && j < list2.size()) {
            if (list1.get(i) <= list2.get(j)) {
                mergedList.add(list1.get(i));
                i++;
            } else {
                mergedList.add(list2.get(j));
                j++;
            }
        }
        while (i < list1.size()) {
            mergedList.add(list1.get(i));
            i++;
        }
        while (j < list2.size()) {
            mergedList.add(list2.get(j));
            j++;
        }
        return mergedList;
    }

    // Method to build a balanced BST from a sorted list of nodes
    private TreeNode buildBalancedBST(List<Integer> nodes, int start, int end) {
        if (start > end) {
            return null;
        }
        int mid = start + (end - start) / 2;
        TreeNode node = new TreeNode(nodes.get(mid));
        node.left = buildBalancedBST(nodes, start, mid - 1);
        node.right = buildBalancedBST(nodes, mid + 1, end);
        return node;
    }

    // Main method to merge two BSTs
    public TreeNode mergeBSTs(TreeNode root1, TreeNode root2) {
        List<Integer> nodes1 = new ArrayList<>();
        List<Integer> nodes2 = new ArrayList<>();
        inorderTraversal(root1, nodes1);
        inorderTraversal(root2, nodes2);
        List<Integer> mergedNodes = mergeSortedLists(nodes1, nodes2);
        return buildBalancedBST(mergedNodes, 0, mergedNodes.size() - 1);
    }

    // Helper method to insert nodes into the BST (for testing purposes)
    public TreeNode insert(TreeNode root, int val) {
        if (root == null) {
            return new TreeNode(val);
        }
        if (val < root.val) {
            root.left = insert(root.left, val);
        } else {
            root.right = insert(root.right, val);
        }
        return root;
    }

    // Method to print the tree in inorder (for testing purposes)
    public void printInOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        printInOrder(root.left);
        System.out.print(root.val + " ");
        printInOrder(root.right);
    }

    // Main method to test the mergeBSTs function
    public static void main(String[] args) {
        BSTMerger bstMerger = new BSTMerger();

        TreeNode root1 = null;
        int[] values1 = {10, 5, 1, 7, 40, 50};
        for (int value : values1) {
            root1 = bstMerger.insert(root1, value);
        }

        TreeNode root2 = null;
        int[] values2 = {20, 15, 25, 5, 30};
        for (int value : values2) {
            root2 = bstMerger.insert(root2, value);
        }

        System.out.println("Inorder traversal of first BST:");
        bstMerger.printInOrder(root1);
        System.out.println();

        System.out.println("Inorder traversal of second BST:");
        bstMerger.printInOrder(root2);
        System.out.println();

        TreeNode mergedRoot = bstMerger.mergeBSTs(root1, root2);

        System.out.println("Inorder traversal of merged BST:");
        bstMerger.printInOrder(mergedRoot);
    }
}

