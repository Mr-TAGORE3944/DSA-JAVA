class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class BinaryTree {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q) {
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        if (left != null && right != null) {
            return root;
        }
        
        return left != null ? left : right;
    }
    
    // Additional methods to build and print the tree for testing purposes
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(5);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(6);
        root.left.right = new TreeNode(2);
        root.right.left = new TreeNode(0);
        root.right.right = new TreeNode(8);
        root.left.right.left = new TreeNode(7);
        root.left.right.right = new TreeNode(4);
        
        TreeNode p = root.left; // 5
        TreeNode q = root.left.right.right; // 4
        
        TreeNode lca = tree.lowestCommonAncestor(root, p, q);
        System.out.println("LCA of " + p.val + " and " + q.val + " is " + lca.val);
    }
}

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        List<TreeNode> path1 = new ArrayList<>();
        List<TreeNode> path2 = new ArrayList<>();

        pathFind(root , p , path1);
        pathFind(root , q , path2);

        int i = 0 ;
        while(path1.size() > i && path2.size() > i){
            if(path1.get(i) != path2.get(i)){
                break;
            }
            i++;
        }

        return path1.get(i-1);
    }

    public boolean pathFind(TreeNode root , TreeNode target, List<TreeNode> path){
        if(root == null) return false;
        path.add(root);
        if(root == target) return true;

        if(pathFind(root.left , target, path) || pathFind(root.right , target, path)) return true;
        path.remove(path.size() - 1);
        return false;
    }
}