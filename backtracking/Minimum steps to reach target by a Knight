// Java program to find minimum steps to reach to
// specific cell in minimum moves by Knight

import java.io.*;
import java.util.*;

// Java program to find minimum steps to reach to
// specific cell in minimum moves by Knight
public class GFG {

    // Class for storing a cell's data
    static class cell {
        int x, y;
        int dis;

        public cell(int x, int y, int dis)
        {
            this.x = x;
            this.y = y;
            this.dis = dis;
        }
    }

    // Utility method returns true if (x, y) lies
    // inside Board
    static boolean isInside(int x, int y, int N)
    {
        if (x >= 1 && x <= N && y >= 1 && y <= N)
            return true;
        return false;
    }

    // Method returns minimum step
    // to reach target position
    static int minStepToReachTarget(int knightPos[],
                                    int targetPos[], int N)
    {
        // x and y direction, where a knight can move
        int dx[] = { -2, -1, 1, 2, -2, -1, 1, 2 };
        int dy[] = { -1, -2, -2, -1, 1, 2, 2, 1 };

        // queue for storing states of knight in board
        Queue<cell> q = new LinkedList<>();

        // push starting position of knight with 0 distance
        q.add(new cell(knightPos[0], knightPos[1], 0));

        cell t;
        int x, y;
        boolean visit[][] = new boolean
            [N + 1][N + 1]; // default initialized to false

        // visit starting state
        visit[knightPos[0]][knightPos[1]] = true;

        // loop until we have one element in queue
        while (!q.isEmpty()) {
            t = q.poll();

            // if current cell is equal to target cell,
            // return its distance
            if (t.x == targetPos[0] && t.y == targetPos[1])
                return t.dis;

            // loop for all reachable states
            for (int i = 0; i < 8; i++) {
                x = t.x + dx[i];
                y = t.y + dy[i];

                // If reachable state is not yet visited and
                // inside board, push that state into queue
                if (isInside(x, y, N) && !visit[x][y]) {
                    visit[x][y] = true;
                    q.add(new cell(x, y, t.dis + 1));
                }
            }
        }
        return Integer.MAX_VALUE;
    }

    // Driver code
    public static void main(String[] args)
    {
        int N = 30;
        int knightPos[] = { 1, 1 };
        int targetPos[] = { 30, 30 };

        // Function call
        System.out.println(
            minStepToReachTarget(knightPos, targetPos, N));
    }
}

// This code contributed by Rajput-Ji























import java.util.LinkedList;
import java.util.Queue;

class KnightMove {
    // Class to represent a cell in the chessboard
    static class Cell {
        int x, y, dist;

        Cell(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }

    // Possible moves for a knight
    static int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
    static int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

    // Method to check if a position is within the chessboard boundaries
    public static boolean isInside(int x, int y, int N) {
        return x >= 0 && x < N && y >= 0 && y < N;
    }

    // Method to find the minimum steps for a knight to reach the target position
    public static int minStepsToReachTarget(int[] knightPos, int[] targetPos, int N) {
        // Create a queue for BFS
        Queue<Cell> q = new LinkedList<>();
        // Starting position of the knight
        q.add(new Cell(knightPos[0], knightPos[1], 0));

        // Boolean array to mark visited cells
        boolean[][] visited = new boolean[N][N];
        visited[knightPos[0]][knightPos[1]] = true;

        // BFS
        while (!q.isEmpty()) {
            Cell t = q.poll();

            // If the target position is reached
            if (t.x == targetPos[0] && t.y == targetPos[1]) {
                return t.dist;
            }

            // Loop through all possible moves of a knight
            for (int i = 0; i < 8; i++) {
                int x = t.x + dx[i];
                int y = t.y + dy[i];

                // If the new position is within the chessboard and not yet visited
                if (isInside(x, y, N) && !visited[x][y]) {
                    visited[x][y] = true;
                    q.add(new Cell(x, y, t.dist + 1));
                }
            }
        }

        // If the target is not reachable
        return -1;
    }

    public static void main(String[] args) {
        int N = 8;
        int[] knightPos = {0, 0};
        int[] targetPos = {7, 7};

        System.out.println("Minimum steps to reach target: " +
            minStepsToReachTarget(knightPos, targetPos, N));
    }
}
