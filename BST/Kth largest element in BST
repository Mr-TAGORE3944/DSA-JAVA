class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinarySearchTree {
    Node root;

    // Utility class to keep track of count and result during traversal
    class Count {
        int count = 0;
    }

    // Function to perform reverse inorder traversal and find the k-th largest element
    void kthLargestUtil(Node node, int k, Count count, Result result) {
        // Base case
        if (node == null || count.count >= k) {
            return;
        }

        // Follow reverse inorder traversal (right, root, left)
        kthLargestUtil(node.right, k, count, result);

        // Increment count of visited nodes
        count.count++;

        // If count becomes k now, then this is the k-th largest node
        if (count.count == k) {
            result.data = node.data;
            return;
        }

        // Recur for left subtree
        kthLargestUtil(node.left, k, count, result);
    }

    // Function to find k-th largest element
    int kthLargest(Node node, int k) {
        Count count = new Count(); // Initialize count
        Result result = new Result(); // Initialize result to store k-th largest element
        kthLargestUtil(node, k, count, result);
        return result.data;
    }

    // Helper class to store the result
    class Result {
        int data = Integer.MIN_VALUE;
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();
        tree.root = new Node(50);
        tree.root.left = new Node(30);
        tree.root.right = new Node(70);
        tree.root.left.left = new Node(20);
        tree.root.left.right = new Node(40);
        tree.root.right.left = new Node(60);
        tree.root.right.right = new Node(80);

        int k = 3;
        System.out.println("The " + k + "-th largest element is " + tree.kthLargest(tree.root, k));
    }
}
