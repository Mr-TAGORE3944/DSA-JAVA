import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left, right;

    public TreeNode(int item) {
        val = item;
        left = right = null;
    }
}

public class BinaryTreeDiagonalTraversal {

    // Function to return the diagonal traversal of the binary tree
    public ArrayList<ArrayList<Integer>> diagonalTraversal(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        // Map to store nodes at each diagonal distance
        HashMap<Integer, ArrayList<Integer>> diagonalMap = new HashMap<>();

        // Queue to perform level order traversal
        Queue<TreeNode> nodeQueue = new LinkedList<>();
        Queue<Integer> diagonalQueue = new LinkedList<>();

        nodeQueue.add(root);
        diagonalQueue.add(0);

        int maxDiagonal = 0;

        while (!nodeQueue.isEmpty()) {
            TreeNode currentNode = nodeQueue.poll();
            int diagonal = diagonalQueue.poll();

            // Add the current node to the corresponding diagonal list in the map
            diagonalMap.putIfAbsent(diagonal, new ArrayList<>());
            diagonalMap.get(diagonal).add(currentNode.val);
            maxDiagonal = Math.max(maxDiagonal, diagonal);

            // If there is a left child, it will be in the next diagonal
            if (currentNode.left != null) {
                nodeQueue.add(currentNode.left);
                diagonalQueue.add(diagonal + 1);
            }

            // The right child will be in the same diagonal
            if (currentNode.right != null) {
                nodeQueue.add(currentNode.right);
                diagonalQueue.add(diagonal);
            }
        }

        // Collect the diagonal traversal from the map
        for (int i = 0; i <= maxDiagonal; i++) {
            result.add(diagonalMap.get(i));
        }

        return result;
    }

    public static void main(String[] args) {
        // Example to test the diagonalTraversal function
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);
        root.left.right.left = new TreeNode(8);
        root.left.right.right = new TreeNode(9);

        BinaryTreeDiagonalTraversal btdt = new BinaryTreeDiagonalTraversal();
        ArrayList<ArrayList<Integer>> diagonalView = btdt.diagonalTraversal(root);
        System.out.println("Diagonal traversal of the binary tree: " + diagonalView);
    }
}
